{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    cart: [],\n    orders: JSON.parse(localStorage.getItem('orders')) || []\n  },\n  mutations: {\n    setOrder(state, payload) {\n      state.orders.push(payload);\n    },\n\n    setProduct(state, payload) {\n      const itemIndex = state.cart.findIndex(item => item.type === payload.type);\n\n      if (itemIndex !== -1) {\n        if (payload.product.id === state.cart[itemIndex].product.id) {\n          state.cart[itemIndex].quantity++;\n        } else {\n          const product = {\n            quantity: 1,\n            ...payload\n          };\n          state.cart.splice(itemIndex, 1, product);\n        }\n      } else {\n        const product = {\n          quantity: 1,\n          ...payload\n        };\n        state.cart.push(product);\n      }\n    },\n\n    clearCart(state) {\n      state.cart = [];\n    },\n\n    deleteProduct(state, index) {\n      state.cart.splice(index, 1);\n    }\n\n  },\n  actions: {\n    setOrder(context, payload) {\n      context.commit('setOrder', payload);\n    },\n\n    setProduct(context, payload) {\n      context.commit('setProduct', payload);\n    },\n\n    deleteProduct(context, payload) {\n      context.commit('deleteProduct', payload);\n    },\n\n    clearCart(context, payload) {\n      context.commit('clearCart', payload);\n    }\n\n  },\n  getters: {\n    getCart(state) {\n      return state.cart;\n    },\n\n    getOrders(state) {\n      return state.orders;\n    }\n\n  }\n});","map":{"version":3,"sources":["C:/Users/Mvideo/Desktop/pcconf/frontend/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","cart","orders","JSON","parse","localStorage","getItem","mutations","setOrder","payload","push","setProduct","itemIndex","findIndex","item","type","product","id","quantity","splice","clearCart","deleteProduct","index","actions","context","commit","getters","getCart","getOrders"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,KAA8C;AAFjD,GADqB;AAK5BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,CAAER,KAAF,EAASS,OAAT,EAAkB;AACxBT,MAAAA,KAAK,CAACE,MAAN,CAAaQ,IAAb,CAAkBD,OAAlB;AACD,KAHQ;;AAITE,IAAAA,UAAU,CAAEX,KAAF,EAASS,OAAT,EAAkB;AAC1B,YAAMG,SAAS,GAAGZ,KAAK,CAACC,IAAN,CAAWY,SAAX,CAAqBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcN,OAAO,CAACM,IAAnD,CAAlB;;AAEA,UAAIH,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpB,YAAIH,OAAO,CAACO,OAAR,CAAgBC,EAAhB,KAAuBjB,KAAK,CAACC,IAAN,CAAWW,SAAX,EAAsBI,OAAtB,CAA8BC,EAAzD,EAA6D;AAC3DjB,UAAAA,KAAK,CAACC,IAAN,CAAWW,SAAX,EAAsBM,QAAtB;AACD,SAFD,MAEO;AACL,gBAAMF,OAAO,GAAG;AACdE,YAAAA,QAAQ,EAAE,CADI;AAEd,eAAGT;AAFW,WAAhB;AAIAT,UAAAA,KAAK,CAACC,IAAN,CAAWkB,MAAX,CAAkBP,SAAlB,EAA6B,CAA7B,EAAgCI,OAAhC;AACD;AACF,OAVD,MAUO;AACL,cAAMA,OAAO,GAAG;AACdE,UAAAA,QAAQ,EAAE,CADI;AAEd,aAAGT;AAFW,SAAhB;AAIAT,QAAAA,KAAK,CAACC,IAAN,CAAWS,IAAX,CAAgBM,OAAhB;AACD;AACF,KAxBQ;;AAyBTI,IAAAA,SAAS,CAAEpB,KAAF,EAAS;AAChBA,MAAAA,KAAK,CAACC,IAAN,GAAa,EAAb;AACD,KA3BQ;;AA4BToB,IAAAA,aAAa,CAAErB,KAAF,EAASsB,KAAT,EAAgB;AAC3BtB,MAAAA,KAAK,CAACC,IAAN,CAAWkB,MAAX,CAAkBG,KAAlB,EAAyB,CAAzB;AACD;;AA9BQ,GALiB;AAqC5BC,EAAAA,OAAO,EAAE;AACPf,IAAAA,QAAQ,CAAEgB,OAAF,EAAWf,OAAX,EAAoB;AAC1Be,MAAAA,OAAO,CAACC,MAAR,CAAe,UAAf,EAA2BhB,OAA3B;AACD,KAHM;;AAIPE,IAAAA,UAAU,CAAEa,OAAF,EAAWf,OAAX,EAAoB;AAC5Be,MAAAA,OAAO,CAACC,MAAR,CAAe,YAAf,EAA6BhB,OAA7B;AACD,KANM;;AAOPY,IAAAA,aAAa,CAAEG,OAAF,EAAWf,OAAX,EAAoB;AAC/Be,MAAAA,OAAO,CAACC,MAAR,CAAe,eAAf,EAAgChB,OAAhC;AACD,KATM;;AAUPW,IAAAA,SAAS,CAAEI,OAAF,EAAWf,OAAX,EAAoB;AAC3Be,MAAAA,OAAO,CAACC,MAAR,CAAe,WAAf,EAA4BhB,OAA5B;AACD;;AAZM,GArCmB;AAmD5BiB,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,CAAE3B,KAAF,EAAS;AACd,aAAOA,KAAK,CAACC,IAAb;AACD,KAHM;;AAIP2B,IAAAA,SAAS,CAAE5B,KAAF,EAAS;AAChB,aAAOA,KAAK,CAACE,MAAb;AACD;;AANM;AAnDmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    cart: [],\n    orders: JSON.parse(localStorage.getItem('orders')) || []\n  },\n  mutations: {\n    setOrder (state, payload) {\n      state.orders.push(payload)\n    },\n    setProduct (state, payload) {\n      const itemIndex = state.cart.findIndex(item => item.type === payload.type)\n\n      if (itemIndex !== -1) {\n        if (payload.product.id === state.cart[itemIndex].product.id) {\n          state.cart[itemIndex].quantity++\n        } else {\n          const product = {\n            quantity: 1,\n            ...payload\n          }\n          state.cart.splice(itemIndex, 1, product)\n        }\n      } else {\n        const product = {\n          quantity: 1,\n          ...payload\n        }\n        state.cart.push(product)\n      }\n    },\n    clearCart (state) {\n      state.cart = []\n    },\n    deleteProduct (state, index) {\n      state.cart.splice(index, 1)\n    }\n  },\n  actions: {\n    setOrder (context, payload) {\n      context.commit('setOrder', payload)\n    },\n    setProduct (context, payload) {\n      context.commit('setProduct', payload)\n    },\n    deleteProduct (context, payload) {\n      context.commit('deleteProduct', payload)\n    },\n    clearCart (context, payload) {\n      context.commit('clearCart', payload)\n    }\n  },\n  getters: {\n    getCart (state) {\n      return state.cart\n    },\n    getOrders (state) {\n      return state.orders\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"module"}